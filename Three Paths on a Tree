#include <bits/stdc++.h>
using namespace std;
 
vector<vector<int>> gr;
vector<int> dis;
vector<int> par;
void dfs(int node,int p,int d)
{
    dis[node]=d;
    par[node] = p;
    for(auto i:gr[node])
    {
        if(i!=p)
        {
            dfs(i,node,d+1);
        }
    }
    return ;
}

void dfs2(int node,int d,int &n3,int &ma)
{
    if(d > ma)
    {
        ma = d;
        n3 = node;
    }
    for(auto it : gr[node])
    {
        if(it != par[node])
        {
            dfs2(it,d+1,n3,ma);
        }
    }
}
int main() {
    int n;
    cin >> n;
    gr.resize(n+1);
    dis.resize(n+1,0);
    par.resize(n+1,0);
    for (int i = 2; i <= n; i++) {
        int u,v;
        cin >> u>> v;
        gr[u].push_back(v);
        gr[v].push_back(u);
    }
    int node1 = 0;
    dfs(1,0,0);
    int ma = 0;
    for(int i = 1;i<n+1;i++)
    {
        if(ma < dis[i])
        {
            ma = dis[i];
            node1 = i;
        }
    }
    dis.resize(n+1,0);
    dfs(node1,0,0);
    int node2 = 0;
    ma = 0;
    for(int i = 1;i<n+1;i++)
    {
        if(ma < dis[i])
        {
            ma = dis[i];
            node2 = i;
        }
    }
    vector<int> d1 = dis;
    dis.resize(n+1,0);
    par.resize(n+1,0);
    dfs(node2,0,0);
    int x = node1;
    queue<int> q;
    while(par[x] != 0)
    {
        for(auto it : gr[x])
        {
            if(it != par[x])
            {
                q.push(it);
            }
        }
        x = par[x];
    }
    int maxx = 0;
    int node3 = -1;
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        dfs2(u,1,node3,maxx);
    }
    cout<<ma + maxx<<endl;
    cout<<node1<<" "<<node2<<" "<<node3<<endl;
   
    return 0;
}
